#include<iostream>
#include<string>
#include<vector>
using namespace std;
class StrBlob
{
public:
	StrBlob()
		:data(make_shared< vector<string> >())
	{}
	StrBlob(initializer_list<string> il)
		:data(make_shared< vector<string> >(il))
	{}
	size_type size() const { return data->size(); }
	bool empty() const { return data->empty(); }
	//add or delete
	void push_back(const string &t) { data->push_back(t); }
	void pop_back();
	//visit 
	string& front();
	string& back();

private:
	shared_ptr<vector<string>> data;
	void check(size_type i, const string &msg) const;
};
void StrBlob::check(size_type i, const string &msg) const
{
	if (i >= data->size())
	{
		throw out_of_range(msg);
	}
}
void StrBlob::pop_back()
{
	check(0, "pop_back on empty StrBlob");
	data->pop_back();
}
string& StrBlob::front()
{
	check(0, "front on empty StrBlob");
	data->front();
}
string& StrBlob::back()
{
	check(0, "back on empty StrBlob");
	data->back();
}



int main()
{

	return 0;
}
